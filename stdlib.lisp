(defmacro dotimes (iter &rest body)
  (assert (eq (length iter) 2))
  (let ((var (head iter))
        (l (last iter))
        (i-var (gensym))
        (iter-list (gensym)))
    (print "dotimes")

    `(let ((~iter-list ~l)
           (~i-var 0))
       (while (< ~i-var (length ~iter-list))
         (let ((~var (nth ~i-var ~iter-list)))
           (print ~var)
           ~@body
           (set ~i-var (+ ~i-var 1)))))))

;;    (list 'let (list
;;                (list iter-list l)
;;                (list i-var 0))
;;          (list 'while (list '< i-var (list 'length iter-list))
;;                (list 'let (list (list var (list 'nth i-var iter-list)))
;;                      (list 'print var)
;;                      (extend (list 'progn)
;;                              body
;;                              (list (list 'set i-var (list '+ i-var 1)))
;;                              ))))))
;; (for x in mylist (progn (print x)))
;; (let ((var 0))
;;   (while (< var (length l))
;;     ,@body))

(defmacro setf (target value)
  (print)
  (cond ((symbolp target)
         (list 'set target value))
        ((tuplep target)
         (let ((value-var (gensym))
               (clauses (map
                         (fn (e)
                             (let ((i (head e))
                                   (v (last e)))
                               (list 'set v (list 'nth i value-var)))
                             (enumerate target)))))
           (extend (list 'let (list (list value-var value)))
                   clauses)))
        (else (raise (Exception)))))


(defmacro cond (&rest clauses)
  (print "cond")
  (assert (> (length clauses) 1))
  (let ((ifs '()))
    (dotimes (clause (reversed clauses))
      (let ((test (head clause))
            (body (tail clause))
            (oldifs ifs))
        (print ifs)
        (set ifs (if (is test 'else)
                     (progn
                       (assert (not ifs))
                       body)
                   `(if ~test (progn ~@body))))
        (extend ifs oldifs)))
    ifs))


(defun reversed (l)
  (let ((r '())
        (i (- (length l) 1)))
    (while (>= i 0)
      (append r (nth i l))
      (set i (- i 1)))
    r))


(defun head (l) (nth 0 l))
(defun last (l) (nth (- (length l) 1) l))
